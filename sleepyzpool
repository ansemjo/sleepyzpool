#!/usr/bin/env python3

# Copyright (c) 2023 Anton Semjonov
# Licensed under the MIT License

from subprocess import run, Popen, PIPE, TimeoutExpired
import argparse, sys

# argument type for limit and interval
def positive(s: str) -> int:
  if int(s) < 1: raise ValueError
  return int(s)

# get pool name and disks from commandline
# TODO: check if disks are actually disks, zpool binary exists, etc.
parser = argparse.ArgumentParser()
parser.add_argument("pool", help="the zpool name to watch with iostat")
parser.add_argument("disks", help="one or more disks to send to standby", nargs="+")
parser.add_argument("--limit", "-l", help="limit in intervals before spinning down disks", type=positive, default=20)
parser.add_argument("--interval", help="iostat interval in seconds", type=positive, default=60)
args = parser.parse_args()

def in_standby(disk: str) -> bool | None:
  "Check if a disk is in standby / spun down with hdparm."
  try:
    check = run(["hdparm", "-C", disk], capture_output=True, check=True, timeout=2)
    lines = check.stdout.splitlines(keepends=False)
    if len(lines) > 3 or lines[0] != b"" or lines[1] != f"{disk}:".encode():
      raise ValueError("unexpected command output from 'hdparm -C'")
    return lines[2].endswith(b"standby")
  except TimeoutExpired:
    return None

def issue_standby(disk: str) -> bool:
  "Send a disk into low-power standby mode / spin down."
  try:
    run(["hdparm", "-y", disk], capture_output=True, check=True, timeout=10)
    return True
  except TimeoutExpired:
    return False

# keep a counter of idle minutes for each disk
counters = { disk: 0 for disk in args.disks }

# start the zpool iostat and parse the stdout lines
# -y : skip first line (since boot)
# -H : scripted mode without header
iostat = Popen(["zpool", "iostat", "-yH", args.pool, str(args.interval)], stdout=PIPE)
for line in iostat.stdout:
  
  # split the stats from line
  alloc, free, r_ops, w_ops, r_bw, w_bw = line.strip().decode().split("\t")[1:]

  # if there were any ops, reset all counters and skip rest of the loop
  if any(( s != "0" for s in [r_ops, w_ops, r_bw, w_bw] )):
    for disk in counters.keys():
      counters[disk] = 0

  # otherwise iterate over disks and increment counter when awake
  else:
    for disk in args.disks:
      standby = in_standby(disk)

      # keep counter at zero as long as the disk is in standby
      if standby is True:
        counters[disk] = 0

      # increment in active state and check if limit was reached
      if standby is False:
        counters[disk] += 1
        if counters[disk] >= args.limit:
          print(f"hdparm\tissuing standby: {disk}", flush=True)
          if issue_standby(disk):
            counters[disk] = 0

      # ignore if hdparm timed out
      if standby is None:
        print(f"ERR: hdparm timed out for {disk}, skipping", file=sys.stderr, flush=True)
        continue

  # print this iteration's values and wait for next iostat line
  print(f"iostat\tops[{r_ops}, {w_ops}]\tbw[{r_bw}, {w_bw}]\tcounters{list(counters.values())}", flush=True)


# wait for process to end (should never get here, unless 'zpool iostat' is killed)
iostat.communicate()